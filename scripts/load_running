		Load Up of System Files into Unameit

# $Id: $
#
# Copyright (c) 1997 Enterprise Systems Management Corp.
#
# This file is part of UName*It.
#
# UName*It is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2, or (at your option) any later
# version.
#
# UName*It is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with UName*It; see the file COPYING.  If not, write to the Free
# Software Foundation, 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
#

(NOTE: commands entered by you, the user, are preceded by #, which is
often the prompt for root.)

	Starting Up

These procedures must be executed as root on the unameit server machine.
The correct version of UNAMEIT_SCRIPTS must be on the PATH.
Kerberos tickets must be obtained using

# kinit unameit.unameit

so you must know the unameit kerboros password.

Create a directory on a device containing 100 megabytes of free space.

Cd to this directory.
---------------------------------------------------------------------------

	Commands used During Loadup

Common Options for Loadup Scripts
All of the loadup scripts have common logging options. These are:

-W	warnings. These indicate something unexpected that should be
	examined. Not an indication of failure. This option is recommended.

-R	rejections. An indication that an object was rejected due to 	
	conflicts, e.g. a duplicate user login name. This option is 
	recommended.

-C	creations. An announcement is made for every unameit object that 
	will be created. This option is not recommended.

-I	ignore. Some objects are ignored because they will be automatically
	generated by unameit. This option is not recommended.

-D	debug. Uses lots of disk space. This option is only for the 
	morbidly curious. This option is not recommended.

-T	stacktrace. Generates a stacktrace during script failure due to
	bugs in the script. Useful if a script fail. This option is 
	recommended.

Loadup Operations

The arguments, other than the above logging options, are MANDATORY.

unameit_load copy_checkpoint 
	 -d data        name of directory to create

unameit_load domains 
	-d data 	name of directory made by unameit_load copy_checkpoint
	-f domains	file containing list of cells and regions

unameit_load networks 
	-d data 	name of directory made by unameit_load copy_checkpoint
	-r region_name	name of this domain (e.g. mktng.xyz.com)
	-m netmasks 	file containing netmasks
	-n networks	file containing networks

unameit_load hosts 
	-c class       computer or router        
        -d data        name of directory made by unameit_load copy_checkpoint 
 	-f hosts       file containing hosts, addresses and aliases
 	-m netmask     netmask for any created networks 
 	-r region_name name of this domain (e.g. mktng.xyz.com) 

unameit_load persons 
        -d data        name of directory made by unameit_load copy_checkpoint 
 	-f persons     file containing personnel names, ids, etc.
 	-r region_name name of this domain (e.g. mktng.xyz.com) 

unameit_load groups  
	-d data 	name of directory made by unameit_load copy_checkpoint
	-r region_name	name of this domain (e.g. mktng.xyz.com)
	-c class	user_group or application_group
	-f group_file	file containing group entries

unameit_load users 
	-d data 	name of directory made by unameit_load copy_checkpoint
	-r region_name	name of this domain (e.g. mktng.xyz.com)
	-c class	user_login or application_login
	-l logins  	file containing login entries
	-a automounts 	file containing automount entries
	-f aliases 	aliases file
	-n map_name 	automount map name (e.g. auto_home)
	-p mount_point	automount map mount point (e.g. /home)
	-o mount_options  automount options (e.g. "-rw,hard,intr")

unameit_load group_users 
	-d data 	name of directory made by unameit_load copy_checkpoint
	-r region_name	name of this domain (e.g. mktng.xyz.com)
	-c class	user_login or application_login
	-f group_file	file containing group entries

unameit_load aliases
	-d data 	name of directory made by unameit_load copy_checkpoint
	-r region_name	name of this domain (e.g. mktng.xyz.com)
	-f aliases 	aliases file

unameit_load netgroups 
	-d data 	name of directory made by unameit_load copy_checkpoint
	-f netgroups	file containing netgroup entries for the domain
	-r region_name	name of this domain (e.g. mktng.xyz.com)

unameit_load generate
	-d data 	name of directory made by unameit_load copy_checkpoint

Other Commands


unameitd		see man page
	
unameit_shutdown	see man page
---------------------------------------------------------------------------


Here is a demonstration of a loadup from scratch, with the operations
in the recommended order. The examples assume that UNAMEIT is set to
the correct value in the users shell. The user must be running as root,
on the host which runs the unameitd server.

---------------------------------------------------------------------------

	Loading Domains (i.e. cells and regions)

Get permissions from kerberos.

# kinit unameit.unameit
(enter password when asked)

Get a copy of the latest unameit checkpoint:

# unameit_load copy_checkpoint data

This will create a temporary directory with copies of the data from the latest
checkpoint from unameit. 

Create a file with the list of regions and cells and call it

    domains		

The format is

	domain-name		cell/region	organization-name

e.g.

	mktng.xyz.com		cell	The World Leader In Manufacturing
	sales.mktng.xyz.com	region	
	gophers.xyz.com		cell	A Different Organization

The organization is only used for cells, and is not mandatory.

Run the load script for domains (see above for other logging options):

# unameit_load domains -d data -f domains -W -R

---------------------------------------------------------------------------

	Load Data Into Server

# unameit_load generate -d data

This creates data/newdata.tcl. Examine the file to see what unameit objects
will be created.

# unameit_shutdown

# CONVERSION_NEWDATA=data/newdata.tcl 
# export CONVERSION_NEWDATA
# unameitd -b $UNAMEIT/scripts/load_adaptive.tcl

This loads data into the server. Problems with the data may be announced,
since the server detects some conflicts that the loadup scripts do not.

Make a new copy of the checkpoint (this will move the old data directory).

# unameit_load copy_checkpoint data

Bring the server back up

# unameitd

---------------------------------------------------------------------------

	Load Networks

# unameit_load networks -d data -r mktng.xyz.com -m netmasks -n networks -W -R
	
---------------------------------------------------------------------------
	
	Load Hosts

# unameit_load hosts -d data -f hosts -r mktng.xyz.com -R -W

---------------------------------------------------------------------------

	Prepare the files for persons, user_logins, and application_logins

At this point, separate the passwd file (or concatenation of them)
into user logins and application logins and system logins. System logins
will be handled elsewhere. Put application logins and user logins in
separate files, naming them 'user_logins' and 'application_logins'.
	
Perform the same for group files.

Now fix the gecos field of the user_logins file to produce the persons
file. The persons file is used to create persons and/or any subclasses
of person (if the schema was extended to have subclasses of person). 
The format of the file is:

1. lines beginning with # are treated as comments.
2. each line contains data for one person.
3. lines consist of phrases separated by semicolons.
4. each phrase consist of an attribute name and value separated by an 
   equals sign.
5. the Class attribute is mandatory, and indicates the class of the
   person to be created.

For example, to create the default form of person, an entry would be

    Class = person; fullname = Harry Jones

The user_logins file gecos field must contain the fullname, in order
to connect it to the correct person in the database. The fullname
will be everything up to a semicolon or colon. Anything following
a semicolon will be put into the user_login record gecos field. For 
example, 

    hjones:*:117:101:Harry Jones; trailing stuff:/home/hjones:/bin/csh

NOTE: make sure that the fullnames are 
 
a) unique in an organization
b) the same in the user_logins file as in the persons file. Leading
   and trailing whitespace is ignored, but embedded whitespace is
   significant.

---------------------------------------------------------------------------
	
	Load User Groups
		
# unameit_load groups -d data -r mktng.xyz.com -c user_group -f user_groups -R -W

---------------------------------------------------------------------------
	
	Load Application Groups
		
# unameit_load groups -d data -r mktng.xyz.com -c application_group \
	-f application_groups -R -W

---------------------------------------------------------------------------
	
	Load Persons
		
# unameit_load persons -d data -r mktng.xyz.com -f user_persons -R -W

---------------------------------------------------------------------------
	
	Load User Logins and Automounts

# unameit_load users -c user_login -d data -r mktng.xyz.com -l user_logins \
	-a automounts -f aliases -n auto_home -p /home \
	-o -rw,hard,intr -R -W

---------------------------------------------------------------------------

	Load Application Logins and Automounts

# unameit_load users -c application_login -d data -r mktng.xyz.com \
	-l application_logins \
	-a automounts -f aliases -n auto_home -p /home \
	-o -rw,hard,intr -R -W

---------------------------------------------------------------------------

	Put User Logins Into Groups
	
# unameit_load group_users -d data -r mktng.xyz.com -c user_login \
	-f user_groups -R -W

---------------------------------------------------------------------------

	Put Application Logins Into Groups
	
# unameit_load group_users -d data -r mktng.xyz.com -c application_login \
	-f application_groups -R -W

---------------------------------------------------------------------------

	Load Mail Aliases

# unameit_load aliases -d data -r mktng.xyz.com -f aliases -R -W

---------------------------------------------------------------------------

	Load Data Into Server

This step is the same as above. It must be performed at this point
to let the server generate some internal goodstuff.

# unameit_load generate -d data
# unameit_shutdown
# CONVERSION_NEWDATA=data/newdata.tcl 
# export CONVERSION_NEWDATA
# unameitd -b $UNAMEIT/scripts/load_adaptive.tcl
# unameit_load copy_checkpoint data

Bring the server back up

# unameitd

---------------------------------------------------------------------------

	Load Netgroups

# unameit_load netgroups -d data -f netgroups -r mktng.xyz.com -R -W

---------------------------------------------------------------------------

	Load Data Into Server

This step is the same as above. 

# unameit_load generate -d data
# unameit_shutdown
# CONVERSION_NEWDATA=data/newdata.tcl 
# export CONVERSION_NEWDATA
# unameitd -b $UNAMEIT/scripts/load_adaptive.tcl

Bring the server back up

# unameitd

---------------------------------------------------------------------------

You are finished with this domain. You can remove the data directories
or the entire working tree if you wish.

---------------------------------------------------------------------------

		Notes on Checkpointing Work In Progress

At any time, while running load scripts (commands beginning with unameit_load),
the work so far may be copied, e.g. with

# cp -r data data.9

However, loading the data into the server requires making a new copy
of the checkpoint using unameit_load copy_checkpoint.

---------------------------------------------------------------------------
---------------------                         -----------------------------
---------------------     Using LoadRunner    -----------------------------
---------------------                         -----------------------------
---------------------------------------------------------------------------

In your working directory (with the input files e.g. aliases) execute
	
# unameit_load gui

This starts the Graphical User Interface to the loadup script. This program
is known as LoadRunner, since it basically just runs load scripts. By default,
it runs in Show mode (see below).


	Input File Setup Dialog
	
Parameters for the load scripts are entered using the Input File Setup dialog,
which is activated by pushing the button labeled 'Input File Setup'. The 
parameters can be saved by pushing the button 'Save Setup'; they will be 
saved in the file whose name is entered for the Setup parameter. By default
this is 'load.conf'. The button 'Read Setup' will read the file again. The
button 'Restore Default Setup' will restore the builtin defaults.

It is recommended that the builtin defaults be used if possible, except for
DefaultRegion.


	LoadRunner

Input File Setup - brings up the Input File Setup Dialog (see above).

Start New Logfile - truncates the current logfile.


	Unameit Server Commands

Stop Server X - stops the unameitd server which is listening to port
X. This corresponds to the environment variable UNAMEIT_SERVER from
the unameit command wrapper.

Load New Data Into Server - executes the script generated by 'Generate
Load Script'. NOTE: Loading data into the server requires that the server 
first be stopped.

Copy Checkpoint From Server - copies the data from the latest checkpoint.

Dump Heap Into HTML - copies the current set of data into HTML format, suitable
for browsing with Netscape.

Copy Heap Into Checkpoint - copies the current set of data into dat files.
This is also done by 'Generate Load Script'.

Start Server X - starts unameitd.	


The following options affect the operation of the LoadRunner program.

	Load Command Execution Options

Choose either 'Execute Command' or 'Show Command'. This sets the mode of
LoadRunner. In Show mode, the commands are not executed, but are instead
put into a text box and displayed. This is a useful mode for learning 
the commands and for checking the setup. In Execute mode the commands are
executed.

	Load Command Logging Options

Select whichever logging options are desired. These options will be passed
to the scripts which are executed. 

	Operation In Progress:

This is a message area which displays the function currently being executed.
The message will be cleared when the operation finishes.

	Load Commands

These correspond to operations of the unameit_load command.
