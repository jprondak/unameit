#
#	@(#)make.script 1.32 90/01/24 SMI
#
#
#
#
# This Makefile only supports long file names.  If you need to support
# short file names.  You can either change the targets to match the
# short file names found in ypmake, or you can modify this file to
# invoke ypmake to generate the maps instead.  The commands to invoke
# ypmake can be found below.
#
#
#
#            ******  START OF EXAMPLE *********
#
#
#
#ALL_MAPS        = ${PASSWD} ${GROUP} ${HOSTS} ${NETWORKS} ${RPC} ${SERVICES} \
#                  ${PROTOCOLS} ${NETGROUP} ${VHE_LIST} ${ALIASES} \
#                  ${PUBLICKEY} ${NETID} ${AUTOMOUNTER}
#DIR             = /etc
#DOM             = `domainname`
#GROUP           = group group.bygid group.byname
#HOSTS           = hosts hosts.byaddr hosts.byname
#NETGROUP        = netgroup netgroup.byhost netgroup.byuser
#NETWORKS        = networks networks.byaddr networks.byname
#NOPUSH          = ""
#PASSWD          = passwd passwd.byname passwd.byuid
#PWFILE          = ${DIR}/passwd
#PROTOCOLS       = protocols protocols.byname protocols.bynumber
#RPC             = rpc rpc.bynumber rpc.byname
#SERVICES        = services services.byname servi.bynp
#ALIASES         = aliases mail.aliases mail.byaddr
#PUBLICKEY       = publickey publickey.byname
#NETID           = netid netid.byname
#AUTOMOUNTER     = auto_master auto_master
#all:
#        @/var/yp/ypmake DIR=${DIR} DOM=${DOM} NOPUSH=${NOPUSH} \
#                PWFILE=${PWFILE} ${ALL_MAPS}
#
#${ALL_MAPS}:
#        @/var/yp/ypmake DIR=${DIR} DOM=${DOM} NOPUSH=${NOPUSH} \
#                PWFILE=${PWFILE} $@
#
#
#		********  END OF EXAMPLE **********
#
#
# Set the following variable to "-b" to have NIS servers use the domain name
# resolver for hosts not in the current domain. 
#
#B=-b
#
B=
DIR =/var/yp/src/current
ALIASES = $DIR/aliases
PWFILE=$(DIR)/passwd
DOM = `domainname`
NOPUSH = ""
YPDIR=/usr/sbin
YPDBDIR=/var/yp
YPPUSH=$(YPDIR)/yppush
MAKEDBM=$(YPDIR)/makedbm
REVNETGROUP=$(YPDIR)/revnetgroup
STDETHERS=$(YPDIR)/stdethers
STDHOSTS=$(YPDIR)/stdhosts
MKNETID=$(YPDIR)/mknetid
MKALIAS=$(YPDIR)/mkalias
DELDUPHOSTS=/opt/unameit/lib/nis/ng_del_dup.awk
#
# Do not cut/paste,  next two lines contain <Space><Tab> pair
#
SPACE_OR_TAB=[ 	]
NOT_SPACE_OR_TAB=[^ 	]
REVSEDCMD= -n\
	-e 's/\(${SPACE_OR_TAB}\)\(${NOT_SPACE_OR_TAB}\)/\1,\2/'\
	-e 's/,[^,]*--[0-9][^,]*//g'\
	-e 's/,[^,]*@[^,]*//g'\
	-e '/\(${SPACE_OR_TAB}\),/s//\1/p'

CHKPIPE=  || (  echo "NIS make terminated:" $@ 1>&2; kill -TERM 0 )


k:
	@if [ ! $(NOPUSH) ]; then $(MAKE)  $(MFLAGS) -k \
		all DOM=$(DOM) PWFILE=$(PWFILE) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k all DOM=$(DOM) \
		PWFILE=$(PWFILE) DIR=$(DIR) NOPUSH=$(NOPUSH);fi

all: passwd group hosts networks rpc services protocols \
	netgroup  aliases publickey netid auto_master

$(YPDBDIR)/$(DOM)/passwd.time: $(PWFILE)
	@(awk 'BEGIN { FS=":"; OFS="\t"; } /^[a-zA-Z0-9_]/ { print $$1, $$0 }' $(PWFILE) $(CHKPIPE))| \
	    $(MAKEDBM) - $(YPDBDIR)/$(DOM)/passwd.byname; 
	@(awk 'BEGIN { FS=":"; OFS="\t"; } /^[a-zA-Z0-9_]/ { printf("%-10d ", $$3); print $$0 }' $(PWFILE) \
	    $(CHKPIPE))| $(MAKEDBM) - $(YPDBDIR)/$(DOM)/passwd.byuid;
	@touch $(YPDBDIR)/$(DOM)/passwd.time; 
	@echo "updated passwd";
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) passwd.byname;fi
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) passwd.byuid;fi
	@if [ ! $(NOPUSH) ]; then echo "pushed passwd"; fi

$(YPDBDIR)/$(DOM)/group.time: $(DIR)/group
	@(awk 'BEGIN { FS=":"; OFS="\t"; } { print $$1, $$0 }' $(DIR)/group $(CHKPIPE))| \
	    $(MAKEDBM) - $(YPDBDIR)/$(DOM)/group.byname; 
	@(awk 'BEGIN { FS=":"; OFS="\t"; } { printf("%-10d ", $$3); print $$0 }' $(DIR)/group $(CHKPIPE)) | \
	    $(MAKEDBM) - $(YPDBDIR)/$(DOM)/group.bygid; 
	@touch $(YPDBDIR)/$(DOM)/group.time; 
	@echo "updated group"; 
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) group.byname; fi
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) group.bygid; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed group"; fi

$(YPDBDIR)/$(DOM)/hosts.time: $(DIR)/hosts
	@(sed -e "/^#/d" -e s/#.*$$// $(DIR)/hosts $(CHKPIPE)) | \
	    ($(STDHOSTS) $(CHKPIPE)) | \
	    (awk '{for (i = 2; i <= NF; i++) print $$i, $$0}' $(CHKPIPE))| \
	    $(MAKEDBM) $(B) -l - $(YPDBDIR)/$(DOM)/hosts.byname;
	@($(STDHOSTS) $(DIR)/hosts $(CHKPIPE))| \
	    (awk 'BEGIN { OFS="\t"; } $$1 !~ /^#/ { print $$1, $$0 }' $(CHKPIPE)) | \
	    $(MAKEDBM) $(B) - $(YPDBDIR)/$(DOM)/hosts.byaddr; 
	@touch $(YPDBDIR)/$(DOM)/hosts.time; 
	@echo "updated hosts"; 
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) hosts.byname; fi
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) hosts.byaddr; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed hosts"; fi

$(YPDBDIR)/$(DOM)/ethers.time: $(DIR)/ethers
	@($(STDETHERS) $(DIR)/ethers $(CHKPIPE)) \
	    |(awk '{print $$1, $$0; for (i = 3;i <= NF;i++) print $$i,$$0}' $(CHKPIPE)) \
	    | $(MAKEDBM) - $(YPDBDIR)/$(DOM)/ethers.byaddr;
	@(awk 'BEGIN { OFS="\t"; } $$1 !~ /^#/ { print $$2, $$0 }' \
	    $(DIR)/ethers $(CHKPIPE)) | \
	    $(MAKEDBM) - $(YPDBDIR)/$(DOM)/ethers.byname;
	@touch $(YPDBDIR)/$(DOM)/ethers.time; 
	@echo "updated ethers"; 
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) ethers.byname; fi
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) ethers.byaddr; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed ethers"; fi

$(YPDBDIR)/$(DOM)/networks.time: $(DIR)/networks
	@(sed -e "/^#/d" -e s/#.*$$// $(DIR)/networks $(CHKPIPE)) |( awk \
	    '{print $$1, $$0; for (i = 3;i <= NF;i++) print $$i,$$0}' \
	    $(CHKPIPE) )| $(MAKEDBM) - $(YPDBDIR)/$(DOM)/networks.byname; 
	@(awk 'BEGIN { OFS="\t"; } $$1 !~ /^#/ { print $$2, $$0 }' \
	   $(DIR)/networks $(CHKPIPE)) | $(MAKEDBM) - $(YPDBDIR)/$(DOM)/networks.byaddr;
	@touch $(YPDBDIR)/$(DOM)/networks.time; 
	@echo "updated networks"; 
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) networks.byname; fi
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) networks.byaddr; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed networks"; fi

$(YPDBDIR)/$(DOM)/services.time: $(DIR)/services
	@(awk 'BEGIN { OFS="\t"; } $$1 !~ /^#/ { print $$2, $$0 }' \
	    $(DIR)/services $(CHKPIPE))| $(MAKEDBM) - $(YPDBDIR)/$(DOM)/services.byname;
	@(awk 'BEGIN { OFS="\t"; } $$1 !~ /^#/ { split($$2, xxx, "/"); print $$1 "/" xxx[2], $$0 }' \
	    $(DIR)/services $(CHKPIPE))| \
	    $(MAKEDBM) - $(YPDBDIR)/$(DOM)/servi.bynp;
	@touch $(YPDBDIR)/$(DOM)/services.time; 
	@echo "updated services"; 
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) services.byname; fi
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) servi.bynp; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed services"; fi

$(YPDBDIR)/$(DOM)/rpc.time: $(DIR)/rpc
	@(awk 'BEGIN { OFS="\t"; } $$1 !~ /^#/ { print $$2, $$0 }' \
	    $(DIR)/rpc $(CHKPIPE))| $(MAKEDBM) - $(YPDBDIR)/$(DOM)/rpc.bynumber;
	@(awk 'BEGIN { OFS="\t"; } $$1 !~ /^#/ { print $$1, $$0 }' \
	    $(DIR)/rpc $(CHKPIPE))| $(MAKEDBM) - $(YPDBDIR)/$(DOM)/rpc.byname;
	@touch $(YPDBDIR)/$(DOM)/rpc.time; 
	@echo "updated rpc"; 
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) rpc.bynumber; fi
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) rpc.byname; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed rpc"; fi

$(YPDBDIR)/$(DOM)/protocols.time: $(DIR)/protocols
	@(awk 'BEGIN { OFS="\t"; } $$1 !~ /^#/ { print $$2, $$0 }' \
	    $(DIR)/protocols $(CHKPIPE)) | $(MAKEDBM) - \
	    $(YPDBDIR)/$(DOM)/protocols.bynumber; 
	@(sed -e "/^#/d" -e s/#.*$$// $(DIR)/protocols $(CHKPIPE)) |( awk \
	    '{print $$1,$$0; for (i = 3;i <= NF;i++) print $$i, $$0}' \
	    $(CHKPIPE))| $(MAKEDBM) - $(YPDBDIR)/$(DOM)/protocols.byname; 
	@touch $(YPDBDIR)/$(DOM)/protocols.time; 
	@echo "updated protocols"; 
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) protocols.byname; fi
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) protocols.bynumber; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed protocols"; fi

$(YPDBDIR)/$(DOM)/netgroup.time: $(DIR)/netgroup
	@(awk -f $(DELDUPHOSTS) $(DIR)/netgroup | \
		$(MAKEDBM) - $(YPDBDIR)/$(DOM)/netgroup)
	@($(REVNETGROUP) < $(DIR)/netgroup -u $(CHKPIPE))|\
	    (sed $(REVSEDCMD) $(CHKPIPE)) |\
	    $(MAKEDBM) - $(YPDBDIR)/$(DOM)/netgroup.byuser;
	@($(REVNETGROUP) < $(DIR)/netgroup -h $(CHKPIPE))|\
	    (sed $(REVSEDCMD) $(CHKPIPE)) |\
	    $(MAKEDBM) - $(YPDBDIR)/$(DOM)/netgroup.byhost;
	@touch $(YPDBDIR)/$(DOM)/netgroup.time; 
	@echo "updated netgroup"; 
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) netgroup; fi
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) netgroup.byuser; fi
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) netgroup.byhost; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed netgroup"; fi

$(YPDBDIR)/$(DOM)/aliases.time: $(ALIASES)
	@cp $(ALIASES) $(YPDBDIR)/$(DOM)/mail.aliases; 
	@(cat $(YPDBDIR)/$(DOM)/mail.aliases $(CHKPIPE)) | (sed 's/://g' $(CHKPIPE)) | /usr/sbin/makemap -Nn dbm $(YPDBDIR)/$(DOM)/mail.aliases;
	@$(MKALIAS) $(YPDBDIR)/$(DOM)/mail.aliases $(YPDBDIR)/$(DOM)/mail.byaddr; 
	@rm $(YPDBDIR)/$(DOM)/mail.aliases; 
	@touch $(YPDBDIR)/$(DOM)/aliases.time; 
	@echo "updated aliases"; 
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) mail.aliases; fi
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) mail.byaddr; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed aliases"; fi


$(YPDBDIR)/$(DOM)/publickey.time: $(DIR)/publickey
	@(sed "/^#/d" < $(DIR)/publickey $(CHKPIPE))| $(MAKEDBM) - $(YPDBDIR)/$(DOM)/publickey.byname; 
	@touch $(YPDBDIR)/$(DOM)/publickey.time; 
	@echo "updated publickey"; 
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) publickey.byname; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed publickey"; fi

$(YPDBDIR)/$(DOM)/netid.time: $(PWFILE) $(DIR)/group $(DIR)/hosts $(DIR)/netid
	@$(MKNETID) -q -p $(PWFILE) -g $(DIR)/group -h $(DIR)/hosts -m $(DIR)/netid > .ypjunk; 
	@$(MAKEDBM) .ypjunk $(YPDBDIR)/$(DOM)/netid.byname; 
	@rm -f .ypjunk; 
	@touch $(YPDBDIR)/$(DOM)/netid.time; 
	@echo "updated netid"; 
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) netid.byname; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed netid"; fi

$(YPDBDIR)/$(DOM)/auto_master.time: $(DIR)/auto_master
	@(sed -e "s/^[ |	]*//g" -e "/^#/d" -e s/#.*$$// < $(DIR)/auto_master $(CHKPIPE))| \
	   $(MAKEDBM) - $(YPDBDIR)/$(DOM)/auto_master;
	@touch $(YPDBDIR)/$(DOM)/auto_master.time;
	@echo "updated auto_master";
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) auto_master; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed auto_master"; fi

$(YPDBDIR)/$(DOM)/netmasks.time: $(DIR)/netmasks
	@(sed -e "s/^[ |	]*//g" -e "/^#/d" -e "s/#.*$$//" < $(DIR)/netmasks $(CHKPIPE))| \
	   (awk 'BEGIN { OFS="\t"; } { print $$1, $$2 }' $(CHKPIPE))| \
	   $(MAKEDBM) - $(YPDBDIR)/$(DOM)/netmasks.byaddr;
	@touch $(YPDBDIR)/$(DOM)/netmasks.time;
	@echo "updated netmasks.byaddr";
	@if [ ! $(NOPUSH) ]; then $(YPPUSH) -d $(DOM) netmasks.byaddr; fi
	@if [ ! $(NOPUSH) ]; then echo "pushed netmasks.byaddr"; fi

passwd:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/passwd.time DOM=$(DOM) DIR=$(DIR) \
		LONG_FILENAMES=$(LONG_FILENAMES) PWFILE=$(PWFILE); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/passwd.time \
		DOM=$(DOM) DIR=$(DIR) PWFILE=$(PWFILE) \
		LONG_FILENAMES=$(LONG_FILENAMES) NOPUSH=$(NOPUSH);fi
group:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/group.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/group.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
hosts:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/hosts.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/hosts.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
ethers:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/ethers.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/ethers.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
networks:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/networks.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/networks.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
rpc:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/rpc.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/rpc.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
services:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/services.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/services.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
protocols:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/protocols.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/protocols.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
netgroup:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/netgroup.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/netgroup.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
aliases:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/aliases.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/aliases.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
publickey:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/publickey.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/publickey.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
netid:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/netid.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/netid.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
auto_master:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/auto_master.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/auto_master.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
netmasks:
	@if [ ! $(NOPUSH) ]; then $(MAKE) $(MFLAGS) -k \
		$(YPDBDIR)/$(DOM)/netmasks.time DOM=$(DOM) DIR=$(DIR); \
	else $(MAKE) $(MFLAGS) -k $(YPDBDIR)/$(DOM)/netmasks.time \
		DOM=$(DOM) DIR=$(DIR) NOPUSH=$(NOPUSH);fi
